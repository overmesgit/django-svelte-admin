/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type {ApiApi, InlineResponse} from "../apis";
/**
 * 
 * @export
 * @interface Group
 */
export class Group {
    readonly id?: number;
    readonly url?: string;
    name: string;

    static readonly attributeTypeMap: {[name: string]: {baseName: string, type: string, format: string} } = {
        "id": {
            "baseName": "id",
            "type": "number",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        }    }

    static list(api: ApiApi, page?: number): Promise<InlineResponse<Group>> {
        return api.listGroups(page)
    }

    static retrieve(api: ApiApi, id: string): Promise<Group> {
        return api.retrieveGroup(id)
    }

    static create(api: ApiApi, obj?: Group): Promise<Group> {
        return api.createGroup(obj)
    }

    static update(api: ApiApi, id: string, obj?: Group): Promise<Group> {
        return api.updateGroup(id, obj)
    }

    static destroy(api: ApiApi, id: string): Promise<void> {
        return api.destroyGroup(id)
    }


}



export function GroupFromJSON(json: any): Group {
    return GroupFromJSONTyped(json, false);
}

export function GroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): Group {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'name': json['name'],
    };
}

export function GroupToJSON(value?: Group | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
    };
}


