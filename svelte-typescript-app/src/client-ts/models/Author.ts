/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type {ApiApi, InlineResponse} from "../apis";


/**
 * 
 * @export
 * @interface Author
 */
export class Author {
    readonly id?: number;
    name: string;

    static readonly attributeTypeMap: {[name: string]: {baseName: string, type: string, format: string, enum?: any} } = {
        "id": {
            "baseName": "id",
            "type": "number",
            "format": ""
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": ""
        }
    }

    static list(api: ApiApi, page?: number): Promise<InlineResponse<Author>> {
        return api.listAuthors(page)
    }

    static retrieve(api: ApiApi, id: string): Promise<Author> {
        return api.retrieveAuthor(id)
    }

    static create(api: ApiApi, obj?: Author): Promise<Author> {
        return api.createAuthor(obj)
    }

    static update(api: ApiApi, id: string, obj?: Author): Promise<Author> {
        return api.updateAuthor(id, obj)
    }

    static destroy(api: ApiApi, id: string): Promise<void> {
        return api.destroyAuthor(id)
    }


}

export namespace Author {
    export enum Fields {
            id = "id",
            name = "name"
    }
}

export function AuthorFromJSON(json: any): Author {
    return AuthorFromJSONTyped(json, false);
}

export function AuthorFromJSONTyped(json: any, ignoreDiscriminator: boolean): Author {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
    };
}

export function AuthorToJSON(value?: Author | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
    };
}


