/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type {ApiApi, InlineResponse} from "../apis";
/**
* @export
* @enum {string}
*/
export enum BookGenreEnum {
    SciFi = 'sci fi',
    Comedy = 'comedy'
}

/**
 * 
 * @export
 * @interface Book
 */
export class Book {
    readonly id?: number;
    name: string;
    genre: BookGenreEnum;
    releaseDate: Date;
    author: string;

    static readonly attributeTypeMap: {[name: string]: {baseName: string, type: string, format: string, enum?: any, required: boolean} } = {
        "id": {
            "baseName": "id",
            "type": "number",
            "format": "",
            "required": false
        },
        "name": {
            "baseName": "name",
            "type": "string",
            "format": "",
            "required": true
        },
        "genre": {
            "baseName": "genre",
            "type": "enum",
            "enum": BookGenreEnum,
            "format": "",
            "required": true
        },
        "releaseDate": {
            "baseName": "release_date",
            "type": "Date",
            "format": "date",
            "required": true
        },
        "author": {
            "baseName": "author",
            "type": "string",
            "format": "",
            "required": true
        }
    }

    static list(api: ApiApi, page?: number, order?: string): Promise<InlineResponse<Book>> {
        return api.listBooks(page, order)
    }

    static retrieve(api: ApiApi, id: string): Promise<Book> {
        return api.retrieveBook(id)
    }

    static create(api: ApiApi, obj?: Book): Promise<Book> {
        return api.createBook(obj)
    }

    static update(api: ApiApi, id: string, obj?: Book): Promise<Book> {
        return api.updateBook(id, '', obj)
    }

    static destroy(api: ApiApi, id: string): Promise<void> {
        return api.destroyBook(id)
    }


}

export namespace Book {
    export enum Fields {
            id = "id",
            name = "name",
            genre = "genre",
            releaseDate = "releaseDate",
            author = "author"
    }
}

export function BookFromJSON(json: any): Book {
    return BookFromJSONTyped(json, false);
}

export function BookFromJSONTyped(json: any, ignoreDiscriminator: boolean): Book {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'genre': json['genre'],
        'releaseDate': (new Date(json['release_date'])),
        'author': json['author'],
    };
}

export function BookToJSON(value?: Book | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'genre': value.genre,
        'release_date': (value.releaseDate.toISOString().substr(0,10)),
        'author': value.author,
    };
}


