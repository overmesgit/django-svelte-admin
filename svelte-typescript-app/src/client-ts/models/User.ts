/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type {ApiApi, InlineResponse} from "../apis";


/**
 * 
 * @export
 * @interface User
 */
export class User {
    readonly id?: number;
    readonly url?: string;
    username: string;
    email?: string;
    groups?: Array<string>;

    static readonly attributeTypeMap: {[name: string]: {baseName: string, type: string, format: string, enum?: any} } = {
        "id": {
            "baseName": "id",
            "type": "number",
            "format": ""
        },
        "url": {
            "baseName": "url",
            "type": "string",
            "format": ""
        },
        "username": {
            "baseName": "username",
            "type": "string",
            "format": ""
        },
        "email": {
            "baseName": "email",
            "type": "string",
            "format": "email"
        },
        "groups": {
            "baseName": "groups",
            "type": "Array<string>",
            "format": ""
        }
    }

    static list(api: ApiApi, page?: number): Promise<InlineResponse<User>> {
        return api.listUsers(page)
    }

    static retrieve(api: ApiApi, id: string): Promise<User> {
        return api.retrieveUser(id)
    }

    static create(api: ApiApi, obj?: User): Promise<User> {
        return api.createUser(obj)
    }

    static update(api: ApiApi, id: string, obj?: User): Promise<User> {
        return api.updateUser(id, obj)
    }

    static destroy(api: ApiApi, id: string): Promise<void> {
        return api.destroyUser(id)
    }


}

export namespace User {
    export enum Fields {
            id = "id",
            url = "url",
            username = "username",
            email = "email",
            groups = "groups"
    }
}

export function UserFromJSON(json: any): User {
    return UserFromJSONTyped(json, false);
}

export function UserFromJSONTyped(json: any, ignoreDiscriminator: boolean): User {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': !exists(json, 'url') ? undefined : json['url'],
        'username': json['username'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'groups': !exists(json, 'groups') ? undefined : json['groups'],
    };
}

export function UserToJSON(value?: User | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'email': value.email,
        'groups': value.groups,
    };
}


