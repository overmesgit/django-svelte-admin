/* tslint:disable */
/* eslint-disable */
/**
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Author,
    AuthorFromJSON,
    AuthorToJSON,
    Book,
    BookFromJSON,
    BookToJSON,
    Group,
    GroupFromJSON,
    GroupToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';
import {exists} from "../runtime";

export interface CreateAuthorRequest {
    author?: Author;
}

export interface CreateBookRequest {
    book?: Book;
}

export interface CreateGroupRequest {
    group?: Group;
}

export interface CreateUserRequest {
    user?: User;
}

export interface DestroyAuthorRequest {
    id: string;
}

export interface DestroyBookRequest {
    id: string;
}

export interface DestroyGroupRequest {
    id: string;
}

export interface DestroyUserRequest {
    id: string;
}

export interface ListAuthorsRequest {
    page?: number;
}

export interface ListBooksRequest {
    page?: number;
}

export interface ListGroupsRequest {
    page?: number;
}

export interface ListUsersRequest {
    page?: number;
}

export interface PartialUpdateAuthorRequest {
    id: string;
    author?: Author;
}

export interface PartialUpdateBookRequest {
    id: string;
    book?: Book;
}

export interface PartialUpdateGroupRequest {
    id: string;
    group?: Group;
}

export interface PartialUpdateUserRequest {
    id: string;
    user?: User;
}

export interface RetrieveAuthorRequest {
    id: string;
}

export interface RetrieveBookRequest {
    id: string;
}

export interface RetrieveGroupRequest {
    id: string;
}

export interface RetrieveUserRequest {
    id: string;
}

export interface UpdateAuthorRequest {
    id: string;
    author?: Author;
}

export interface UpdateBookRequest {
    id: string;
    book?: Book;
}

export interface UpdateGroupRequest {
    id: string;
    group?: Group;
}

export interface UpdateUserRequest {
    id: string;
    user?: User;
}

interface fromJson<T> {
    fromJson(json: any): T
}

/**
 *
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async createAuthorRaw(requestParameters: CreateAuthorRequest): Promise<runtime.ApiResponse<Author>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/author/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorToJSON(requestParameters.author),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async createAuthor(author?: Author): Promise<Author> {
        const response = await this.createAuthorRaw({author: author});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async createBookRaw(requestParameters: CreateBookRequest): Promise<runtime.ApiResponse<Book>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/book/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async createBook(book?: Book): Promise<Book> {
        const response = await this.createBookRaw({book: book});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async createGroupRaw(requestParameters: CreateGroupRequest): Promise<runtime.ApiResponse<Group>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/groups/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.group),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async createGroup(group?: Group): Promise<Group> {
        const response = await this.createGroupRaw({group: group});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async createUser(user?: User): Promise<User> {
        const response = await this.createUserRaw({user: user});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async destroyAuthorRaw(requestParameters: DestroyAuthorRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling destroyAuthor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async destroyAuthor(id: string): Promise<void> {
        await this.destroyAuthorRaw({id: id});
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async destroyBookRaw(requestParameters: DestroyBookRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling destroyBook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/book/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async destroyBook(id: string): Promise<void> {
        await this.destroyBookRaw({id: id});
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async destroyGroupRaw(requestParameters: DestroyGroupRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling destroyGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async destroyGroup(id: string): Promise<void> {
        await this.destroyGroupRaw({id: id});
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async destroyUserRaw(requestParameters: DestroyUserRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling destroyUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async destroyUser(id: string): Promise<void> {
        await this.destroyUserRaw({id: id});
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listAuthorsRaw(requestParameters: ListAuthorsRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listAuthors(page?: number): Promise<InlineResponse2002> {
        const response = await this.listAuthorsRaw({page: page});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async listBooksRaw(requestParameters: ListBooksRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/book/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async listBooks(page?: number): Promise<InlineResponse2003> {
        const response = await this.listBooksRaw({page: page});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async listGroupsRaw(requestParameters: ListGroupsRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/groups/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async listGroups(page?: number): Promise<InlineResponse2001> {
        const response = await this.listGroupsRaw({page: page});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listUsersRaw(requestParameters: ListUsersRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async listUsers(page?: number): Promise<InlineResponse200> {
        const response = await this.listUsersRaw({page: page});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateAuthorRaw(requestParameters: PartialUpdateAuthorRequest): Promise<runtime.ApiResponse<Author>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling partialUpdateAuthor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/author/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorToJSON(requestParameters.author),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateAuthor(id: string, author?: Author): Promise<Author> {
        const response = await this.partialUpdateAuthorRaw({id: id, author: author});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async partialUpdateBookRaw(requestParameters: PartialUpdateBookRequest): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling partialUpdateBook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/book/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async partialUpdateBook(id: string, book?: Book): Promise<Book> {
        const response = await this.partialUpdateBookRaw({id: id, book: book});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async partialUpdateGroupRaw(requestParameters: PartialUpdateGroupRequest): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling partialUpdateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.group),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async partialUpdateGroup(id: string, group?: Group): Promise<Group> {
        const response = await this.partialUpdateGroupRaw({id: id, group: group});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateUserRaw(requestParameters: PartialUpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling partialUpdateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async partialUpdateUser(id: string, user?: User): Promise<User> {
        const response = await this.partialUpdateUserRaw({id: id, user: user});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveAuthorRaw(requestParameters: RetrieveAuthorRequest): Promise<runtime.ApiResponse<Author>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieveAuthor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/author/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveAuthor(id: string): Promise<Author> {
        const response = await this.retrieveAuthorRaw({id: id});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async retrieveBookRaw(requestParameters: RetrieveBookRequest): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieveBook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/book/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async retrieveBook(id: string): Promise<Book> {
        const response = await this.retrieveBookRaw({id: id});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async retrieveGroupRaw(requestParameters: RetrieveGroupRequest): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieveGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async retrieveGroup(id: string): Promise<Group> {
        const response = await this.retrieveGroupRaw({id: id});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveUserRaw(requestParameters: RetrieveUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling retrieveUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async retrieveUser(id: string): Promise<User> {
        const response = await this.retrieveUserRaw({id: id});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateAuthorRaw(requestParameters: UpdateAuthorRequest): Promise<runtime.ApiResponse<Author>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateAuthor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/author/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorToJSON(requestParameters.author),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateAuthor(id: string, author?: Author): Promise<Author> {
        const response = await this.updateAuthorRaw({id: id, author: author});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async updateBookRaw(requestParameters: UpdateBookRequest): Promise<runtime.ApiResponse<Book>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateBook.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/book/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookToJSON(requestParameters.book),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => BookFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async updateBook(id: string, book?: Book): Promise<Book> {
        const response = await this.updateBookRaw({id: id, book: book});
        return await response.value();
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest): Promise<runtime.ApiResponse<Group>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateGroup.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/groups/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupToJSON(requestParameters.group),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows groups to be viewed or edited.
     */
    async updateGroup(id: string, group?: Group): Promise<Group> {
        const response = await this.updateGroupRaw({id: id, group: group});
        return await response.value();
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<User>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * API endpoint that allows users to be viewed or edited.
     */
    async updateUser(id: string, user?: User): Promise<User> {
        const response = await this.updateUserRaw({id: id, user: user});
        return await response.value();
    }

}
